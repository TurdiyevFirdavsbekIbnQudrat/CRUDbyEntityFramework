// <auto-generated />
using EntityCRUD.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CRUDentity.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EmployeeStaff", b =>
                {
                    b.Property<int>("employeesemployeId")
                        .HasColumnType("integer");

                    b.Property<int>("staffsstaffId")
                        .HasColumnType("integer");

                    b.HasKey("employeesemployeId", "staffsstaffId");

                    b.HasIndex("staffsstaffId");

                    b.ToTable("EmployeeStaff");
                });

            modelBuilder.Entity("Models.Company", b =>
                {
                    b.Property<int>("companyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("companyId"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("employeeId")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("companyId");

                    b.HasIndex("employeeId");

                    b.ToTable("companies");
                });

            modelBuilder.Entity("Models.Employee", b =>
                {
                    b.Property<int>("employeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("employeId"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("employeId");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("Models.Staff", b =>
                {
                    b.Property<int>("staffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("staffId"));

                    b.Property<string>("staffName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("staffId");

                    b.ToTable("staffs");
                });

            modelBuilder.Entity("EmployeeStaff", b =>
                {
                    b.HasOne("Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("employeesemployeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Staff", null)
                        .WithMany()
                        .HasForeignKey("staffsstaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Company", b =>
                {
                    b.HasOne("Models.Employee", "employes")
                        .WithMany("companies")
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employes");
                });

            modelBuilder.Entity("Models.Employee", b =>
                {
                    b.Navigation("companies");
                });
#pragma warning restore 612, 618
        }
    }
}
